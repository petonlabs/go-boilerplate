#!/usr/bin/env bash
# Git pre-commit hook that runs golangci-lint
# This hook prevents commits if linting fails

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo ""
echo -e "${BLUE}🔒 Pre-commit hook: Running golangci-lint${NC}"
echo ""

# Get repository root
REPO_ROOT=$(git rev-parse --show-toplevel)
BACKEND_DIR="$REPO_ROOT/apps/backend"

# Check if backend directory exists
if [ ! -d "$BACKEND_DIR" ]; then
    echo -e "${YELLOW}⚠️  Backend directory not found, skipping lint${NC}"
    exit 0
fi

# Change to backend directory
cd "$BACKEND_DIR" || exit 1

# Only run if Go files are being committed in apps/backend
GO_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '^apps/backend/.*\.go$' || true)

if [ -z "$GO_FILES" ]; then
    echo -e "${YELLOW}ℹ️  No Go files staged in apps/backend${NC}"
    echo ""
    exit 0
fi

echo -e "${GREEN}Found Go files to lint:${NC}"
echo "$GO_FILES" | sed 's|^apps/backend/|  • |'
echo ""

# Check if golangci-lint is installed
if ! command -v golangci-lint &> /dev/null; then
    echo -e "${YELLOW}⚠️  golangci-lint not found${NC}"
    echo -e "${YELLOW}Install it with:${NC}"
    echo -e "  ${BLUE}brew install golangci-lint${NC}  # macOS"
    echo -e "  ${BLUE}# or${NC}"
    echo -e "  ${BLUE}curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b \$(go env GOPATH)/bin v1.59.0${NC}"
    echo ""
    echo -e "${YELLOW}Skipping lint check...${NC}"
    echo ""
    exit 0
fi

# Get golangci-lint version
LINT_VERSION=$(golangci-lint --version | head -n1 | awk '{print $4}')
echo -e "${GREEN}✓${NC} Using golangci-lint version ${LINT_VERSION}"
echo ""

# Run golangci-lint on the whole backend
echo -e "${BLUE}Running linter...${NC}"
if golangci-lint run --config .golangci.yml ./...; then
    echo ""
    echo -e "${GREEN}╔═══════════════════════════════════════════════╗${NC}"
    echo -e "${GREEN}║                                               ║${NC}"
    echo -e "${GREEN}║          ✅  LINTING PASSED  ✅               ║${NC}"
    echo -e "${GREEN}║                                               ║${NC}"
    echo -e "${GREEN}║         Ready to commit!                      ║${NC}"
    echo -e "${GREEN}║                                               ║${NC}"
    echo -e "${GREEN}╚═══════════════════════════════════════════════╝${NC}"
    echo ""
    exit 0
else
    echo ""
    echo -e "${RED}╔═══════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║                                               ║${NC}"
    echo -e "${RED}║          ❌  LINTING FAILED  ❌               ║${NC}"
    echo -e "${RED}║                                               ║${NC}"
    echo -e "${RED}╚═══════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Please fix the linting errors above.${NC}"
    echo ""
    echo -e "${YELLOW}To bypass this check (not recommended):${NC}"
    echo -e "  ${BLUE}git commit --no-verify${NC}"
    echo ""
    exit 1
fi
