services:
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    image: go-boilerplate/backend:latest
    env_file:
      - ./apps/backend/.env
    depends_on:
      - postgres
      - redis
    ports:
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/server", "-healthcheck"]
      interval: 30s
      timeout: 3s
      retries: 3
    # Optional Traefik labels (commented for plug & play)
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.backend.entrypoints=web"
    #   - "traefik.http.services.backend.loadbalancer.server.port=8080"

  postgres:
    image: postgres:18-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:8-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  db-backup:
    image: alpine:3.20
    depends_on:
      - postgres
    environment:
      PGPASSWORD: ${DATABASE_PASSWORD:-app}
      DATABASE_HOST: postgres
      DATABASE_PORT: "5432"
      DATABASE_USER: ${DATABASE_USER:-app}
      DATABASE_NAME: ${DATABASE_NAME:-app}

      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      S3_REGION: "auto"
      S3_FORCE_PATH_STYLE: "true"

      BACKUP_CRON: "0 */6 * * *" # every 6 hours
      BACKUP_RETENTION_DAYS: "14"
    volumes:
      - ./scripts/backup:/backup:ro
      - backups:/var/backups
    entrypoint: ["/bin/sh", "/backup/entrypoint.sh"]
    restart: unless-stopped

volumes:
  pgdata:
  backups:
